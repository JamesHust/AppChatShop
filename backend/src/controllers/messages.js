const db = require("../util/database");
const { Guid } = require("js-guid");
const { getInfoShops } = require("./shops");
const { getRoomById, checkExistRoom, createRoom } = require("./room-chat");
const { convertPathFile, formatDateTimeInsertDB } = require("../util/common");
const Response = require("../models/response");
const DetailMessageText = require("../models/detail-message-text");
const DetailMessageImage = require("../models/detail-message-img");

//khai b√°o c√°c bi·∫øn to√†n c·ª•c d√πng chung
const tableName = "message";
const objName = "Message";
const primaryKeyTable = "ChatId";

//#region API function - service

/**
 * H√†m l·∫•y t·∫•t c·∫£ b·∫£ng chat cho t·ª´ng kh√°ch h√†ng
 * @param {*} req
 * @param {*} res
 * @param {*} next
 */
const getBoardChat = async (req, res, next) => {
  const customerId = req.params.customerId;
  if (customerId) {
    try {
      // L·∫•y danh s√°ch c√°c shop hi·ªán t·∫°i
      const listShop = await getInfoShops();
      if (listShop && listShop.length > 0) {
        const result = [];
        await Promise.all(
          listShop.map(async (shop) => {
            const shopId = shop.ShopId;
            const shopName = shop.ShopName;
            const avatar = convertPathFile(shop.Avatar);
            const activeStatus = "ƒêang ho·∫°t ƒë·ªông"; //t·∫°m th·ªùi ƒëang fix
            let finalTextMessage = null;
            let status = 2;
            let roomId = null;
            // L·∫•y chatId t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng ƒë·ªëi t∆∞·ª£ng
            const shopChatId = await getChatId(shopId, "shop");
            const customerChatId = await getChatId(customerId, "customer");
            const existRoom = await checkExistRoom(customerChatId, shopChatId);
            // Check xem ƒë√£ c√≥ ph√≤ng chat ch∆∞a
            if (existRoom) {
              roomId = existRoom.RoomId;
              // L·∫•y message g·∫ßn ƒë√¢y nh·∫•t c·ªßa ph√≤ng chat
              const lastMessage = await getLastMessage(roomId);
              if (lastMessage) {
                // Tr∆∞·ªùng h·ª£p n·∫øu l√† tin nh·∫Øn text
                if (
                  lastMessage.TextMessage &&
                  lastMessage.TextMessage != "null"
                ) {
                  if (lastMessage.SenderId === customerChatId) {
                    finalTextMessage = `B·∫°n: ${lastMessage.TextMessage}`;
                  } else {
                    finalTextMessage = lastMessage.TextMessage;
                  }
                }
                // Tr∆∞·ªùng h·ª£p n·∫øu l√† tin nh·∫Øn h√¨nh ·∫£nh
                if (
                  lastMessage.ImgMessage &&
                  lastMessage.ImgMessage != "null"
                ) {
                  if (lastMessage.SenderId === customerChatId) {
                    finalTextMessage = "B·∫°n v·ª´a g·ª≠i 1 h√¨nh ·∫£nh üåÑ";
                  } else {
                    finalTextMessage = `${shopName} v·ª´a g·ª≠i 1 h√¨nh ·∫£nh üåÑ`;
                  }
                }
                status = lastMessage.Status;
              } else {
                finalTextMessage = "Nh·∫≠p tin nh·∫Øn ƒë·∫∑t h√†ng ngay n√†o üòç";
              }
            } else {
              roomId = await createRoom(customerChatId, shopChatId);
              finalTextMessage = "Nh·∫≠p tin nh·∫Øn ƒë·∫∑t h√†ng ngay n√†o üòç";
            }

            result.push({
              shopId: shopId,
              shopName: shopName,
              avatar: avatar,
              activeStatus: activeStatus,
              finalTextMessage: finalTextMessage,
              status: status,
              roomId: roomId,
            });
          })
        );
        res
          .status(200)
          .send(
            new Response(
              (isSuccess = true),
              (errorCode = null),
              (devMsg = null),
              (userMsg = null),
              (moreInfo = null),
              (data = result)
            )
          );
      } else {
        res
          .status(404)
          .send(
            new Response(
              (isSuccess = false),
              (errorCode = null),
              (devMsg = "Not found any shop in database"),
              (userMsg =
                "Kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ c·ª≠a h√†ng n√†o trong c·ªü s·ªü d·ªØ li·ªáu."),
              (moreInfo = null),
              (data = null)
            )
          );
      }
    } catch (err) {
      res
        .status(500)
        .send(
          new Response(
            (isSuccess = false),
            (errorCode = "DB001"),
            (devMsg = err.toString()),
            (userMsg = "L·ªói l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu"),
            (moreInfo = null),
            (data = null)
          )
        );
    }
  } else {
    res
      .status(400)
      .send(
        new Response(
          (isSuccess = true),
          (errorCode = null),
          (devMsg = "Params in request is null"),
          (userMsg = null),
          (moreInfo = null),
          (data = null)
        )
      );
  }
};

/**
 * H√†m l·∫•y danh s√°ch tin nh·∫Øn theo t·ª´ng ph√≤ng chat
 * @param {*} req
 * @param {*} res
 * @param {*} next
 */
const getListMessage = async (req, res, next) => {
  const roomId = req.params.roomId;
  if (roomId) {
    try {
      const response = await db.execute(
        `select * from ${tableName} where RoomId = '${roomId}' order by CreatedDate desc;`
      );
      if (response[0] && response[0].length > 0) {
        let listMess = [];
        for (var mess of response[0]) {
          const infoUser = await getInfoReceiver(mess.SenderId);
          // X√©t tr∆∞·ªùng h·ª£p tin nh·∫Øn g·ª≠i l√† text
          if (mess.TextMessage) {
            const message = new DetailMessageText(
              mess.MesageId,
              mess.TextMessage,
              mess.CreatedDate,
              infoUser._id,
              infoUser.name,
              infoUser.avatar
            );
            listMess.push(message);
          } else {
            const message = new DetailMessageImage(
              mess.MesageId,
              mess.ImgMessage,
              mess.CreatedDate,
              infoUser._id,
              infoUser.name,
              infoUser.avatar
            );
            listMess.push(message);
          }
        }
        res
          .status(200)
          .send(
            new Response(
              (isSuccess = true),
              (errorCode = null),
              (devMsg = null),
              (userMsg = null),
              (moreInfo = null),
              (data = listMess)
            )
          );
      } else {
        res
          .status(404)
          .send(
            new Response(
              (isSuccess = true),
              (errorCode = null),
              (devMsg = "Data is empty."),
              (userMsg = null),
              (moreInfo = null),
              (data = null)
            )
          );
      }
    } catch (err) {
      res
        .status(500)
        .send(
          new Response(
            (isSuccess = false),
            (errorCode = "DB001"),
            (devMsg = err.toString()),
            (userMsg = "L·ªói l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu"),
            (moreInfo = null),
            (data = null)
          )
        );
    }
  } else {
    res
      .status(400)
      .send(
        new Response(
          (isSuccess = true),
          (errorCode = null),
          (devMsg = "Params in request is null"),
          (userMsg = null),
          (moreInfo = null),
          (data = null)
        )
      );
  }
};

/**
 * Th√™m tin nh·∫Øn v·ª´a g·ª≠i v√†o c∆° s·ªü d·ªØ li·ªáu
 * @param {*} req
 * @param {*} res
 * @param {*} next
 */
const addNewMessage = async (req, res, next) => {
  const packageMess = req.body.packageMess;
  const actor = req.body.actor;
  const roomId = req.body.roomId;
  if (packageMess && actor && roomId) {
    try {
      const roomChat = await getRoomById(roomId);
      // Check c√≥ roomchat ph√π h·ª£p
      if (roomChat) {
        const messageId = packageMess._id;
        let senderId = null;
        let recipientId = null;
        let textMessage = null;
        let imgMessage = null;
        let status = 2;
        // Check tr∆∞·ªùng h·ª£p l√† kh√°ch h√†ng hay d·ªãch v·ª• g·ª≠i tin nh·∫Øn
        if (actor == "customer") {
          senderId = roomChat.CustomerChatId;
          recipientId = roomChat.ServiceChatId;
          status = 1;
        } else {
          senderId = roomChat.ServiceChatId;
          recipientId = roomChat.CustomerChatId;
        }
        //tr∆∞·ªùng h·ª£p g·ª≠i tin nh·∫Øn l√† text
        if (packageMess.text) {
          textMessage = packageMess.text;
        }
        //tr∆∞·ªùng h·ª£p g·ª≠i tin nh·∫Øn l√† h√¨nh ·∫£nh
        if (packageMess.image) {
          imgMessage = packageMess.image;
        }
        //Th·ª±c hi·ªán th√™m tin nh·∫Øn m·ªõi
        const result = db.execute(
          `insert into ${tableName} (MesageId, SenderId, RecipientId, TextMessage, ImgMessage, RoomId, Status) values ('${messageId}', '${senderId}', '${recipientId}', '${textMessage}', '${imgMessage}', '${roomId}', ${status})`
        );
        res
          .status(200)
          .send(
            new Response(
              (isSuccess = true),
              (errorCode = null),
              (devMsg = null),
              (userMsg = null),
              (moreInfo = null),
              (data = result)
            )
          );
      } else {
        res
          .status(404)
          .send(
            new Response(
              (isSuccess = false),
              (errorCode = null),
              (devMsg = `Not found room chat with id = ${roomId}.`),
              (userMsg = null),
              (moreInfo = null),
              (data = null)
            )
          );
      }
    } catch (err) {
      res
        .status(500)
        .send(
          new Response(
            (isSuccess = false),
            (errorCode = "DB004"),
            (devMsg = err.toString()),
            (userMsg = "L·ªói th√™m m·ªõi d·ªØ li·ªáu v√†o c∆° s·ªü d·ªØ li·ªáu"),
            (moreInfo = null),
            (data = null)
          )
        );
    }
  } else {
    res
      .status(400)
      .send(
        new Response(
          (isSuccess = true),
          (errorCode = null),
          (devMsg = "Params in request is null"),
          (userMsg = null),
          (moreInfo = null),
          (data = null)
        )
      );
  }
};
//#region

//#region Private Function
/**
 * H√†m l·∫•y tin nh·∫Øn cu·ªëi c√πng theo roomId
 * @param {*} roomId Id ph√≤ng chat
 * @returns
 */
const getLastMessage = async (roomId) => {
  let result = null;
  if (roomId) {
    const response = await db.execute(
      `select * from ${tableName} where RoomId = '${roomId}' order by CreatedDate desc limit 1;`
    );
    if (response[0][0]) {
      result = response[0][0];
    }
  }
  return result;
};

/**
 * L·∫•y th√¥ng tin ng∆∞·ªùi nh·∫≠n
 * @param {*} id id shop ho·∫∑c id kh√°ch h√†ng
 * @returns
 */
const getInfoReceiver = async (id) => {
  let _id = null;
  let name = null;
  let avatar = null;
  if (id) {
    const customer = await db.execute(
      `select * from customer where ChatId = '${id}'`
    );
    if (customer[0][0]) {
      _id = 1;
      name = customer[0][0].CustomerName;
      avatar = convertPathFile(customer[0][0].Avatar);
    } else {
      const shop = await db.execute(
        `select * from shop where ChatId = '${id}'`
      );
      if (shop[0][0]) {
        _id = shop[0][0].ShopId;
        name = shop[0][0].ShopName;
        avatar = convertPathFile(shop[0][0].Avatar);
      }
    }
  }
  return {
    _id: _id,
    name: name,
    avatar: avatar,
  };
};

/**
 * L√¢√Ω ChatId t∆∞∆°ng ·ª©ng v·ªõi id - kh√≥a ch√≠nh ƒë·ªãnh danh kh√°ch h√†ng ho·∫∑c d·ªãch v·ª•, c·ª≠a h√†ng
 * @param {*} id - kh√≥a ch√≠nh
 * @param {*} object - ƒë·ªëi t∆∞·ª£ng c·∫ßn l·∫•y id
 * @returns
 */
const getChatId = async (id, nameObject) => {
  let result = null;
  let res = null;
  if (nameObject === "shop") {
    res = await db.execute(`select ChatId from shop where ShopId = '${id}'`);
  }
  if (nameObject === "customer") {
    res = await db.execute(
      `select ChatId from customer where CustomerId = '${id}'`
    );
  }
  if (res[0][0]) {
    result = res[0][0].ChatId;
  }
  return result;
};
//#region

//export controller
module.exports = {
  getBoardChat,
  getListMessage,
  addNewMessage,
};
